Ques1 : When would you want to create a remote repository rather than keeping all your work local ?

Ans1 : Whenever we would want to work from multiple sources, whether it be a friend or a different computer, working on cloud is better because it becomes accessible from all everywhere. If working personally, then working locally might work fine. You want to maximize the number of commits on your local file and then send the most relevant ones to github repository so that the online version is clean.

Ques2 : Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Ans2 : If the changes are done by someone else then you will never know what caused the changes if it is updated automatically. I think leaving every change, its acknowledgment, registering it as a commit and sharing it with GitHub should be manual. 

Ques3 : Describe the differences between forks, clones, and branches. When would you use one instead of another?

Ans3 : Fork is to copy a repository on github from github. Its a faster way to clone and push. 

Clone is to copy a repository from github to local computer. It is to edit the repository with some extra code that can only be done on the local computer.

Branch is executed on a single repository. It is used to experiment with the current version and creates a new set of commits outside the master branch.

Ques4: What is the benefit of having a copy of the last known state of the remote stored locally?

Ans4: Its beautiful. When we clone from GitHub repository, the local copy has a commit history of the all the commits, and we can compare the changes we made to our local copy to the version on the github repository easily. 

Ques5: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Ans5: Without Git or GitHub, for each change we woul have to make a separate memo, share the whole code and keep sending files via mail or share them over cloud. But with GitHub all these tasks are simplified manifold. Also, you have a standardised procedure at Git so that everyone can follow it. 

Ques6: When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

And6: It is good for collaboration. If I am alone, I will do everything on master but if i am working with someone else it is better to use pull request, use fetch and not pull, merge then locally, send the branch to GitHub, confirm that the merge to master has no conflicts (merge button is green), and delete that branch. That way we are more clear about the changes we do while we collaborate.